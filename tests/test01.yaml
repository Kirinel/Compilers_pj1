; ModuleID = 'my_module'
source_filename = "my_module"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

@print_int = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@print_int.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"

declare i32 @printf(...)

define i32 @getarg(i32) {
entry:
  %load_from_array = extractelement <3 x float> <float 1.000000e+00, float 2.000000e+00, float 3.000000e+00>, i32 %0
  %conv = fptosi float %load_from_array to i32
  ret i32 %conv
}

define float @getargf(i32) {
entry:
  %load_from_array = extractelement <3 x float> <float 1.000000e+00, float 2.000000e+00, float 3.000000e+00>, i32 %0
  ret float %load_from_array
}

define void @inc(i32* noalias, i32* noalias) {
entry:
  %n = alloca i32*
  store i32* %0, i32** %n
  %b = alloca i32*
  store i32* %1, i32** %b
  %tmp = load i32*, i32** %n
  %tmp1 = load i32, i32* %tmp
  %add = add i32 %tmp1, 1
  %tmp2 = load i32*, i32** %n
  %tmp3 = load i32, i32* %tmp2
  %add4 = add i32 %tmp3, 1
  %ptr = load i32*, i32** %n
  %varval = load i32, i32* %ptr
  store i32 %add4, i32* %ptr
  %tmp5 = load i32*, i32** %b
  %tmp6 = load i32, i32* %tmp5
  %add7 = add i32 %tmp6, 1
  %tmp8 = load i32*, i32** %b
  %tmp9 = load i32, i32* %tmp8
  %add10 = add i32 %tmp9, 1
  %ptr11 = load i32*, i32** %b
  %varval12 = load i32, i32* %ptr11
  store i32 %add10, i32* %ptr11
  %tmp13 = load i32*, i32** %n
  %tmp14 = load i32, i32* %tmp13
  %print = call i32 (...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @print_int, i32 0, i32 0), i32 %tmp14)
  ret void
}

define i32 @run() {
entry:
  %a = alloca i32
  store i32 1, i32* %a
  %b = alloca i32
  store i32 1, i32* %b
  %tmp = load i32, i32* %a
  %icmp = icmp sgt i32 %tmp, 0
  %cmp_value = zext i1 %icmp to i32
  %tobool = icmp ne i32 %cmp_value, 0
  br i1 %tobool, label %if_yes, label %if_no

if_yes:                                           ; preds = %entry
  %tmp1 = load i32, i32* %a
  %mul = mul i32 %tmp1, 2
  %tmp2 = load i32, i32* %a
  %mul3 = mul i32 %tmp2, 2
  %varval = load i32, i32* %a
  store i32 %mul3, i32* %a
  br label %if_end

if_no:                                            ; preds = %entry
  %varval4 = load i32, i32* %a
  store i32 0, i32* %a
  br label %if_end

if_end:                                           ; preds = %if_no, %if_yes
  call void @inc(i32* %a, i32* %a)
  %getarg = call i32 @getarg(i32 2)
  %c = alloca i32
  store i32 %getarg, i32* %c
  %tmp5 = load i32, i32* %c
  %print = call i32 (...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @print_int.1, i32 0, i32 0), i32 %tmp5)
  ret i32 15
}

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #0

attributes #0 = { nounwind }
